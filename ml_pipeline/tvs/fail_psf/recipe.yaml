# `recipe.yaml` is the main configuration file for an MLflow Recipe.
# Required recipe parameters should be defined in this file with either concrete values or
# variables such as {{ INGEST_DATA_LOCATION }}.
#
# Variables must be dereferenced in a profile YAML file, located under `profiles/`.
# See `profiles/local.yaml` for example usage. One may switch among profiles quickly by
# providing a profile name such as `local` in the Recipe object constructor:
# `r = Recipe(profile="local")`
#
# NOTE: All "FIXME::REQUIRED" fields in recipe.yaml and profiles/*.yaml must be set correctly
#       to adapt this template to a specific regression problem. To find all required fields,
#       under the root directory of this recipe, type on a unix-like command line:
#       $> grep "# FIXME::REQUIRED:" recipe.yaml profiles/*.yaml
#
# NOTE: YAML does not support tabs for indentation. Please use spaces and ensure that all YAML
#       files are properly formatted.
  recipe: "classification/v1"

  context:
    recipe_root_path : "./ml_pipeline/tvs/fail_psf"
    target_col: {{TARGET_COL}}
    experiment: {{EXPERIMENT}}

  # FIXME::REQUIRED: Specifies the target column name for model training and evaluation.

  steps:
    # Specifies the dataset to use for model development
    ingest:
        ingest_fn: "ingest_fn"
        table_name: &table_name "dataset"
        credentials:
            username: &db_username "{{ 'DB_USERNAME' | env }}"
            password: &db_password "{{ 'DB_PASSWORD' | env }}"
            hostname: &db_hostname "{{ 'DB_HOSTNAME' | env }}"
            port: &db_port "{{ 'DB_PORT' | env }}"
            database_name: &db_database_name "{{ 'DB_NAME' | env }}"
    split:
        split_fn: "split_fn"
        split_ratios: [ 0.75, 0.125, 0.125 ]

    transform:
        transformer_fn: "transformer_fn"
        cols:
            cm_motif_dep:
                embedder:
                    path : "sklearn.feature_extraction.text.TfidfVectorizer"
                    params:
                        max_features : 5000
                        ngram_range : (1,3)
                filters:
                    - type: "EqualFilter"
                      neg: 1
                      value: "black"
                    - type: "InFilter"
                      neg: 1
                      values: ["N", "Y"]
                formatter:
                    cleaner:
                        regex_patterns:
                            '\* [a-z]* \*[:]': ' '
                            '[a-z]\[[a-z0-9]+\]': ' '
                            '<[^>]+>': ' '
                            '[^\w\s]': ' '
                            '\d+': ' '
                            '\b[a-zA-Z]\b': ''
                            '\W': ' '
                            '\s+': ' '
            cm_action_correc:
                embedder:
                    path: "sklearn.feature_extraction.text.TfidfVectorizer"
                    params:
                        max_features: 5000
                        ngram_range: (1,3)
            cm_info_interne:
                embedder:
                    path: "sklearn.feature_extraction.text.TfidfVectorizer"
                    params:
                        max_features: 5000
                        ngram_range: (1,3)
    train:
        estimator_fn: "estimator_fn"
        loss: "log_loss"
        validation_metric: &validation_metric
            name: "accuracy_score"
            params: {}
    evaluate:
        validation_criteria:
            - metric: *validation_metric
              threshold: .5
            - metric:
                  name: "f1_score"
                  params: {"average" : "weighted"}
              threshold: .5
    register_:
        register_fn: "register_fn"
        artifact_path: "sklearn-model"
        registered_model_name: "registered_model_name"
        source:
            type: 'sql_alchemy_based'
            config:
                hostname: *db_hostname
                port: *db_port
                user: *db_username
                database_name: *db_database_name
                table_name: *table_name




